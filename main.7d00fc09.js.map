{"version":3,"sources":["scripts/main.js"],"names":["startGameButton","document","querySelector","board","boardSize","pointsCounter","messageForWinner","messageForLoser","allCells","querySelectorAll","winnerScore","score","changeStartBtnToRestartBtn","classList","contains","textContent","remove","add","hideStartMessage","messageBeforeStart","checkIfMergePossible","numbersInColumns","makeArrayOfNumbersInColumns","isPair","isVerticalPair","isHorizontalPair","numbersInRows","makeArrayOfNumbersInRows","array","i","length","generateNumber","some","cell","found","horizontallyCell","Math","floor","random","verticallyCell","cellForNewNumber","rows","cells","newNumber","updateClassList","step","arr","push","Number","makePairsOfNumbers","x","filter","a","matchNumbersOpp","num","forEach","row","moveNumbersUp","currentNumbers","addedNumbers","moveNumbersDown","unshift","moveNumbersLeft","moveNumbersRight","value","className","addEventListener","innerHTML","toString","e","code"],"mappings":"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","file":"main.7d00fc09.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startGameButton = document.querySelector('.button');\nconst board = document.querySelector('tbody');\nconst boardSize = 4;\nconst pointsCounter = document.querySelector('.game-score');\nconst messageForWinner = document.querySelector('.message-win');\nconst messageForLoser = document.querySelector('.message-lose');\nconst allCells = document.querySelectorAll('td');\nconst winnerScore = 2048;\nlet score = 0;\n\nstartGameButton.addEventListener('click', () => {\n  changeStartBtnToRestartBtn();\n  hideStartMessage();\n\n  [...allCells].forEach(cell => {\n    cell.innerHTML = '';\n    updateClassList(cell);\n\n    return cell;\n  });\n\n  if (!messageForLoser.classList.contains('hidden')) {\n    messageForLoser.classList.add('hidden');\n  }\n\n  if (!messageForWinner.classList.contains('hidden')) {\n    messageForWinner.classList.add('hidden');\n  }\n\n  score = 0;\n  pointsCounter.textContent = score.toString();\n  generateNumber();\n});\n\nfunction changeStartBtnToRestartBtn() {\n  if (startGameButton.classList.contains('start')) {\n    startGameButton.textContent = 'Restart';\n    startGameButton.classList.remove('start');\n    startGameButton.classList.add('restart');\n  }\n}\n\nfunction hideStartMessage() {\n  const messageBeforeStart = document.querySelector('.message-start');\n\n  if (!messageBeforeStart.classList.contains('hidden')) {\n    messageBeforeStart.classList.add('hidden');\n  }\n}\n\nfunction checkIfMergePossible() {\n  const numbersInColumns = makeArrayOfNumbersInColumns();\n  const numbersInRows = makeArrayOfNumbersInRows();\n  let isPair = true;\n  let isVerticalPair = false;\n  let isHorizontalPair = false;\n\n  for (const array of numbersInRows) {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === array[i + 1]) {\n        isHorizontalPair = true;\n        break;\n      }\n    }\n  }\n\n  for (const array of numbersInColumns) {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === array[i + 1]) {\n        isVerticalPair = true;\n        break;\n      }\n    }\n  }\n\n  if (!isHorizontalPair && !isVerticalPair) {\n    isPair = false;\n  }\n\n  if (!isPair) {\n    messageForLoser.classList.remove('hidden');\n  }\n}\n\nfunction generateNumber() {\n  const isEmptyCell = [...allCells].some(cell => !cell.textContent);\n\n  if (!isEmptyCell) {\n    checkIfMergePossible();\n\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const horizontallyCell = Math.floor(Math.random() * boardSize);\n    const verticallyCell = Math.floor(Math.random() * boardSize);\n    const cellForNewNumber = board.rows[horizontallyCell].cells[verticallyCell];\n\n    if (!cellForNewNumber.textContent) {\n      const newNumber = Math.random() >= 0.9 ? 4 : 2;\n\n      cellForNewNumber.textContent = `${newNumber}`;\n      updateClassList(cellForNewNumber);\n      found = true;\n    }\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  if (e.code === 'Numpad8' || e.code === 'ArrowUp') {\n    hideStartMessage();\n    changeStartBtnToRestartBtn();\n    moveNumbersUp();\n    pointsCounter.textContent = `${score}`;\n    generateNumber();\n  }\n\n  if (e.code === 'Numpad6' || e.code === 'ArrowRight') {\n    hideStartMessage();\n    changeStartBtnToRestartBtn();\n    moveNumbersRight();\n    pointsCounter.textContent = `${score}`;\n    generateNumber();\n  }\n\n  if (e.code === 'Numpad4' || e.code === 'ArrowLeft') {\n    hideStartMessage();\n    changeStartBtnToRestartBtn();\n    moveNumbersLeft();\n    pointsCounter.textContent = `${score}`;\n    generateNumber();\n  }\n\n  if (e.code === 'Numpad2' || e.code === 'ArrowDown') {\n    hideStartMessage();\n    changeStartBtnToRestartBtn();\n    moveNumbersDown();\n    pointsCounter.textContent = `${score}`;\n    generateNumber();\n  }\n});\n\nfunction makeArrayOfNumbersInColumns() {\n  const array = [];\n  let step = 0;\n\n  do {\n    const arr = [];\n\n    for (let i = step; i < allCells.length; i += boardSize) {\n      if (allCells[i].textContent) {\n        arr.push(Number(allCells[i].textContent));\n      }\n    }\n\n    array.push(arr);\n    step++;\n  } while (step !== 4);\n\n  return array;\n}\n\nfunction makePairsOfNumbers(array) {\n  for (let x = 0; x < array.length; x++) {\n    for (let i = 0; i < array[x].length; i++) {\n      if (array[x][i] === array[x][i + 1]) {\n        array[x][i] *= 2;\n\n        if (array[x][i] === winnerScore) {\n          messageForWinner.classList.remove('hidden');\n        }\n\n        array[x][i + 1] = 0;\n        score += array[x][i];\n      }\n\n      array[x] = array[x].filter(a => a !== 0);\n    }\n  }\n\n  return array;\n}\n\nfunction matchNumbersOpp(array) {\n  for (let x = 0; x < array.length; x++) {\n    for (let i = array[x].length - 1; i >= 0; i--) {\n      if (array[x][i] === array[x][i - 1]) {\n        array[x][i] *= 2;\n\n        if (array[x][i] === winnerScore) {\n          messageForWinner.classList.remove('hidden');\n        }\n\n        array[x][i - 1] = 0;\n        score += array[x][i];\n      }\n    }\n\n    array[x] = array[x].filter(num => num !== 0);\n  }\n\n  return array;\n}\n\nfunction makeArrayOfNumbersInRows() {\n  const arr = [];\n\n  [...board.rows].forEach(row => {\n    const array = [];\n\n    [...row.cells].forEach(cell => {\n      if (cell.textContent) {\n        array.push(Number(cell.textContent));\n      }\n    });\n\n    arr.push(array);\n  });\n\n  return arr;\n}\n\nfunction moveNumbersUp() {\n  const currentNumbers = makeArrayOfNumbersInColumns();\n  const addedNumbers = makePairsOfNumbers(currentNumbers);\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let x = 0; x < boardSize; x++) {\n      if (addedNumbers[x][i]) {\n        board.rows[i].cells[x].textContent = `${addedNumbers[x][i]}`;\n      } else {\n        board.rows[i].cells[x].textContent = '';\n      }\n\n      updateClassList(board.rows[i].cells[x]);\n    }\n  }\n}\n\nfunction moveNumbersDown() {\n  const currentNumbers = makeArrayOfNumbersInColumns();\n  const addedNumbers = matchNumbersOpp(currentNumbers);\n\n  for (const array of addedNumbers) {\n    while (array.length !== boardSize) {\n      array.unshift(1);\n    }\n  }\n\n  for (let i = boardSize - 1; i >= 0; i--) {\n    for (let x = boardSize - 1; x >= 0; x--) {\n      if (addedNumbers[x][i] !== 1) {\n        board.rows[i].cells[x].textContent = `${addedNumbers[x][i]}`;\n      } else {\n        board.rows[i].cells[x].textContent = '';\n      }\n\n      updateClassList(board.rows[i].cells[x]);\n    }\n  }\n}\n\nfunction moveNumbersLeft() {\n  const currentNumbers = makeArrayOfNumbersInRows();\n  const addedNumbers = makePairsOfNumbers(currentNumbers);\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let x = 0; x < boardSize; x++) {\n      if (addedNumbers[i][x]) {\n        board.rows[i].cells[x].textContent = `${addedNumbers[i][x]}`;\n      } else {\n        board.rows[i].cells[x].textContent = '';\n      }\n\n      updateClassList(board.rows[i].cells[x]);\n    }\n  }\n}\n\nfunction moveNumbersRight() {\n  const currentNumbers = makeArrayOfNumbersInRows();\n  const addedNumbers = matchNumbersOpp(currentNumbers);\n\n  for (const array of addedNumbers) {\n    while (array.length !== boardSize) {\n      array.unshift(1);\n    }\n  }\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let x = 0; x < boardSize; x++) {\n      if (addedNumbers[i][x] !== 1) {\n        board.rows[i].cells[x].textContent = `${addedNumbers[i][x]}`;\n      } else {\n        board.rows[i].cells[x].textContent = '';\n      }\n\n      updateClassList(board.rows[i].cells[x]);\n    }\n  }\n}\n\nfunction updateClassList(cell) {\n  cell.classList.value = '';\n  cell.className = 'field-cell';\n\n  if (cell.textContent) {\n    cell.classList.add(`${cell.classList.value}--${cell.textContent}`);\n  }\n}\n"]}